--zad1
-- Создание таблицы STUDENT
drop TABLE STUDENT;

select * from STUDENT;
CREATE TABLE STUDENT (
    STUDENT_ID NUMBER PRIMARY KEY,       -- Первичный ключ
    STUDENT_NAME VARCHAR2(100) NOT NULL, -- Имя студента
    STUDENT_AGE NUMBER NOT NULL,         -- Возраст студента
    ENROLL_DATE DATE NOT NULL            -- Дата зачисления
);

--zad2
-- Заполнение таблицы 10 строками
INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (1, 'Ivanov Ivan', 20, TO_DATE('2022-09-01', 'YYYY-MM-DD'));

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (2, 'Petrova Olga', 19, TO_DATE('2023-01-15', 'YYYY-MM-DD'));

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (3, 'Sidorov Alexey', 21, TO_DATE('2021-06-20', 'YYYY-MM-DD'));

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (4, 'Nikolaeva Anna', 22, TO_DATE('2020-03-10', 'YYYY-MM-DD'));

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (5, 'Kuznetsov Dmitry', 20, TO_DATE('2022-11-30', 'YYYY-MM-DD'));

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (6, 'Fedorova Elena', 18, TO_DATE('2023-08-25', 'YYYY-MM-DD'));

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (7, 'Smirnov Sergey', 23, TO_DATE('2019-12-15', 'YYYY-MM-DD'));

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (8, 'Alexeev Nikolay', 19, TO_DATE('2023-05-05', 'YYYY-MM-DD'));

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (9, 'Popova Maria', 21, TO_DATE('2021-07-14', 'YYYY-MM-DD'));

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (10, 'Vasilyev Alexey', 20, TO_DATE('2022-04-18', 'YYYY-MM-DD'));

-- Зафиксируем изменения
COMMIT;

--zad3
BEGIN
    DBMS_OUTPUT.ENABLE;
END;
/


-- Создание триггера STUDENT_OP_BEFORE
CREATE OR REPLACE TRIGGER STUDENT_OP_BEFORE
BEFORE INSERT OR DELETE OR UPDATE
ON STUDENT
DECLARE
    v_operation VARCHAR2(10);
BEGIN
    -- Вывод сообщения в серверную консоль
    DBMS_OUTPUT.PUT_LINE('Триггер STUDENT_OP_BEFORE: Выполняется операция ');
END;
/

--zad5
CREATE OR REPLACE TRIGGER STUDENT_ROW_BEFORE
BEFORE INSERT OR DELETE OR UPDATE
ON STUDENT
FOR EACH ROW
BEGIN
        DBMS_OUTPUT.PUT_LINE('Триггер STUDENT_ROW_BEFORE:  ID = ' || :NEW.STUDENT_ID);
END;
/

--zad6

CREATE OR REPLACE TRIGGER STUDENT_ROW_BEFORE
BEFORE INSERT OR DELETE OR UPDATE
ON STUDENT
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('Триггер STUDENT_ROW_BEFORE: Добавление строки с ID = ' || :NEW.STUDENT_ID);
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('Триггер STUDENT_ROW_BEFORE: Обновление строки с ID = ' || :OLD.STUDENT_ID);
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('Триггер STUDENT_ROW_BEFORE: Удаление строки с ID = ' || :OLD.STUDENT_ID);
    END IF;
END;
/
 

--zad7

CREATE OR REPLACE TRIGGER STUDENT_OP_AFTER
AFTER INSERT OR DELETE OR UPDATE
ON STUDENT
DECLARE
    v_operation VARCHAR2(10);
BEGIN
    IF INSERTING THEN
        v_operation := 'INSERT';
    ELSIF DELETING THEN
        v_operation := 'DELETE';
    ELSIF UPDATING THEN
        v_operation := 'UPDATE';
    END IF;

    DBMS_OUTPUT.PUT_LINE('Триггер STUDENT_OP_AFTER: Завершена операция ' || v_operation);
END;
/


--zad8

CREATE OR REPLACE TRIGGER STUDENT_ROW_AFTER
AFTER INSERT OR DELETE OR UPDATE
ON STUDENT
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('Триггер STUDENT_ROW_AFTER: Добавлена строка с ID = ' || :NEW.STUDENT_ID);
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('Триггер STUDENT_ROW_AFTER: Обновлена строка с ID = ' || :OLD.STUDENT_ID);
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('Триггер STUDENT_ROW_AFTER: Удалена строка с ID = ' || :OLD.STUDENT_ID);
    END IF;
END;
/

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (16, 'Vasilyev Alexey', 20, TO_DATE('2022-04-18', 'YYYY-MM-DD'));

--zad9
CREATE TABLE AUDIT_LOG (
    OperationDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    OperationType VARCHAR2(10),
    TriggerName VARCHAR2(50),
    Data CLOB
);


--zad10
CREATE OR REPLACE TRIGGER STUDENT_ROW_BEFORE
BEFORE INSERT OR DELETE OR UPDATE
ON STUDENT
FOR EACH ROW
DECLARE
 v_operation VARCHAR2(10);
BEGIN
IF INSERTING THEN
        v_operation := 'INSERT';
    ELSIF DELETING THEN
        v_operation := 'DELETE';
    ELSIF UPDATING THEN
        v_operation := 'UPDATE';
    END IF;
    DBMS_OUTPUT.PUT_LINE('STUDENT_ROW_BEFORE: ' || v_operation);

    INSERT INTO AUDIT_LOG (OperationType, TriggerName, Data)
    VALUES (v_operation, 'STUDENT_ROW_BEFORE', 'Operation performed on STUDENT table');
END;
/


CREATE OR REPLACE TRIGGER STUDENT_ROW_AFTER
AFTER INSERT OR DELETE OR UPDATE
ON STUDENT
FOR EACH ROW
DECLARE 
    v_operation VARCHAR2(10);
BEGIN
IF INSERTING THEN
        v_operation := 'INSERT';
    ELSIF DELETING THEN
        v_operation := 'DELETE';
    ELSIF UPDATING THEN
        v_operation := 'UPDATE';
    END IF;
    DBMS_OUTPUT.PUT_LINE('STUDENT_ROW_AFTER: ' || v_operation);

    INSERT INTO AUDIT_LOG (OperationType, TriggerName, Data)
    VALUES (v_operation, 'STUDENT_ROW_AFTER', 'Operation performed on STUDENT table');
END;
/

CREATE OR REPLACE TRIGGER STUDENT_OP_AFTER
AFTER INSERT OR DELETE OR UPDATE
ON STUDENT
DECLARE
    v_operation VARCHAR2(10);
BEGIN

    IF INSERTING THEN
        v_operation := 'INSERT';
    ELSIF DELETING THEN
        v_operation := 'DELETE';
    ELSIF UPDATING THEN
        v_operation := 'UPDATE';
    END IF;
    DBMS_OUTPUT.PUT_LINE('STUDENT_OP_AFTER: ' || v_operation);

    INSERT INTO AUDIT_LOG (OperationType, TriggerName, Data)
    VALUES (v_operation, 'STUDENT_OP_AFTER', 'Operation performed on STUDENT table');
END;
/

CREATE OR REPLACE TRIGGER STUDENT_OP_BEFORE
BEFORE INSERT OR DELETE OR UPDATE
ON STUDENT
DECLARE
    v_operation VARCHAR2(10);
BEGIN

    IF INSERTING THEN
        v_operation := 'INSERT';
    ELSIF DELETING THEN
        v_operation := 'DELETE';
    ELSIF UPDATING THEN
        v_operation := 'UPDATE';
    END IF;
    DBMS_OUTPUT.PUT_LINE('STUDENT_OP_BEFORE: ' || v_operation);

    INSERT INTO AUDIT_LOG (OperationType, TriggerName, Data)
    VALUES (v_operation, 'STUDENT_OP_BEFORE', 'Operation performed on STUDENT table');
END;
/

--zad11
-- Вставка двух записей с одинаковым первичным ключом

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (3, 'Sidorov Alexey', 21, TO_DATE('2021-06-20', 'YYYY-MM-DD'));

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (3, 'Sidorov Alexey', 21, TO_DATE('2021-06-20', 'YYYY-MM-DD'));


DELETE FROM STUDENT WHERE STUDENT_ID = 13;

INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (17, 'Sidorov Alexey', 21, TO_DATE('2021-06-20', 'YYYY-MM-DD'));

select * from AUDIT_LOG;
--zad12

DROP TABLE STUDENT;

CREATE OR REPLACE TRIGGER PREVENT_DROP_TRIGGER
BEFORE DROP
ON DATABASE
BEGIN
    IF ORA_DICT_OBJ_NAME = 'STUDENT' THEN
        RAISE_APPLICATION_ERROR(-20001, 'Удаление таблицы STUDENT запрещено!');
    END IF;
END;
/

--zad13

DROP TABLE AUDIT_LOG;

--zad14
drop view student_view;

CREATE OR REPLACE VIEW STUDENT_VIEW AS
SELECT STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE FROM STUDENT;


CREATE OR REPLACE TRIGGER STUDENT_VIEW_INSERT
INSTEAD OF INSERT
ON STUDENT_VIEW
FOR EACH ROW
BEGIN
    INSERT INTO STUDENT (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE)
    VALUES (:NEW.STUDENT_ID, :NEW.STUDENT_NAME, :NEW.STUDENT_AGE, :NEW.ENROLL_DATE);
END;
/

INSERT INTO STUDENT_VIEW (STUDENT_ID, STUDENT_NAME, STUDENT_AGE, ENROLL_DATE) 
VALUES (18, 'Vasilyev Alexey', 20, TO_DATE('2022-04-18', 'YYYY-MM-DD'));

select * from STUDENT;

commit;
